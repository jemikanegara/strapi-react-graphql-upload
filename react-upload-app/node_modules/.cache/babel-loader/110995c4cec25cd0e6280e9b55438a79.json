{"ast":null,"code":"var _jsxFileName = \"/Users/strnegara/Desktop/ylp/react-strapi-upload/react-app/src/App.js\";\nimport React from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport ApolloClient, { gql } from 'apollo-boost';\nimport { ApolloProvider, useMutation } from '@apollo/react-hooks';\nconst UPLOAD_DOCUMENT = gql`\n  mutation UploadDocument($documents: [ID]){\n    createLawfirmDocument (input: {data: {Documents: $documents}}){\n      lawfirmDocument {\n        Documents {\n          name\n        }\n      }\n    }\n  }\n`;\nconst client = new ApolloClient({\n  uri: 'http://localhost:1337/graphql'\n});\n\nfunction UploadDoc() {\n  const [files, setFiles] = React.useState(null);\n  const [uploadDocument, {\n    data,\n    loading,\n    error\n  }] = useMutation(UPLOAD_DOCUMENT);\n  return React.createElement(\"div\", {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"file\",\n    multiple: true,\n    onChange: e => {\n      const keys = Object.keys(e.target.files);\n      const newFiles = keys.map(key => e.target.files[key]);\n      console.log(newFiles); // const fileIndex = Object.keys \n      // e.target.validity.valid && uploadDocument({variables: {documents: e.target.files}})\n      // const newFiles = e.target.files.map(file => file)\n      // setFiles(newFiles)\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }));\n}\n\nfunction App() {\n  return React.createElement(ApolloProvider, {\n    client: client,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, React.createElement(UploadDoc, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/strnegara/Desktop/ylp/react-strapi-upload/react-app/src/App.js"],"names":["React","ApolloClient","gql","ApolloProvider","useMutation","UPLOAD_DOCUMENT","client","uri","UploadDoc","files","setFiles","useState","uploadDocument","data","loading","error","e","keys","Object","target","newFiles","map","key","console","log","App"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,OAAO,WAAP;AACA,OAAOC,YAAP,IAAsBC,GAAtB,QAAgC,cAAhC;AACA,SAASC,cAAT,EAAyBC,WAAzB,QAA4C,qBAA5C;AAEA,MAAMC,eAAe,GAAGH,GAAI;;;;;;;;;;CAA5B;AAYA,MAAMI,MAAM,GAAG,IAAIL,YAAJ,CAAiB;AAC9BM,EAAAA,GAAG,EAAE;AADyB,CAAjB,CAAf;;AAIA,SAASC,SAAT,GAAqB;AACnB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBV,KAAK,CAACW,QAAN,CAAe,IAAf,CAA1B;AACA,QAAM,CAACC,cAAD,EAAiB;AAACC,IAAAA,IAAD;AAAOC,IAAAA,OAAP;AAAiBC,IAAAA;AAAjB,GAAjB,IAA4CX,WAAW,CAACC,eAAD,CAA7D;AACA,SACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,QAAQ,MAA3B;AAA4B,IAAA,QAAQ,EAAEW,CAAC,IAAI;AACzC,YAAMC,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYD,CAAC,CAACG,MAAF,CAASV,KAArB,CAAb;AACA,YAAMW,QAAQ,GAAGH,IAAI,CAACI,GAAL,CAASC,GAAG,IAAIN,CAAC,CAACG,MAAF,CAASV,KAAT,CAAea,GAAf,CAAhB,CAAjB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAZ,EAHyC,CAIzC;AACA;AACA;AACA;AACD,KARD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAaD;;AAED,SAASK,GAAT,GAAe;AACX,SACA,oBAAC,cAAD;AAAgB,IAAA,MAAM,EAAEnB,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,CADA;AAKH;;AAED,eAAemB,GAAf","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport ApolloClient, {gql} from 'apollo-boost';\nimport { ApolloProvider, useMutation } from '@apollo/react-hooks';\n\nconst UPLOAD_DOCUMENT = gql`\n  mutation UploadDocument($documents: [ID]){\n    createLawfirmDocument (input: {data: {Documents: $documents}}){\n      lawfirmDocument {\n        Documents {\n          name\n        }\n      }\n    }\n  }\n`\n\nconst client = new ApolloClient({\n  uri: 'http://localhost:1337/graphql',\n});\n\nfunction UploadDoc() {\n  const [files, setFiles] = React.useState(null)\n  const [uploadDocument, {data, loading , error}] = useMutation(UPLOAD_DOCUMENT)\n  return (\n    <div className=\"App\">\n      <input type=\"file\" multiple onChange={e => {\n        const keys = Object.keys(e.target.files)\n        const newFiles = keys.map(key => e.target.files[key])\n        console.log(newFiles)\n        // const fileIndex = Object.keys \n        // e.target.validity.valid && uploadDocument({variables: {documents: e.target.files}})\n        // const newFiles = e.target.files.map(file => file)\n        // setFiles(newFiles)\n      }}></input>\n    </div>\n  );\n}\n\nfunction App() {\n    return (\n    <ApolloProvider client={client}>\n    <UploadDoc />\n    </ApolloProvider>\n  );\n} \n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}