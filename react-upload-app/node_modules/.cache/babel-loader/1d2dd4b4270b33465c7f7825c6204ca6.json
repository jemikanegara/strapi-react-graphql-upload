{"ast":null,"code":"'use strict';\n\nvar _interopRequireDefault = require('@babel/runtime/helpers/interopRequireDefault');\n\nvar _extends2 = _interopRequireDefault(require('@babel/runtime/helpers/extends'));\n\nvar _require = require('apollo-link'),\n    ApolloLink = _require.ApolloLink,\n    Observable = _require.Observable;\n\nvar _require2 = require('apollo-link-http-common'),\n    selectURI = _require2.selectURI,\n    selectHttpOptionsAndBody = _require2.selectHttpOptionsAndBody,\n    fallbackHttpConfig = _require2.fallbackHttpConfig,\n    serializeFetchParameter = _require2.serializeFetchParameter,\n    createSignalIfSupported = _require2.createSignalIfSupported,\n    parseAndCheckHttpResponse = _require2.parseAndCheckHttpResponse;\n\nvar _require3 = require('extract-files'),\n    extractFiles = _require3.extractFiles,\n    ReactNativeFile = _require3.ReactNativeFile;\n\nexports.ReactNativeFile = ReactNativeFile;\n\nexports.createUploadLink = function (_temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n      _ref$uri = _ref.uri,\n      fetchUri = _ref$uri === void 0 ? '/graphql' : _ref$uri,\n      _ref$fetch = _ref.fetch,\n      linkFetch = _ref$fetch === void 0 ? fetch : _ref$fetch,\n      fetchOptions = _ref.fetchOptions,\n      credentials = _ref.credentials,\n      headers = _ref.headers,\n      includeExtensions = _ref.includeExtensions;\n\n  var linkConfig = {\n    http: {\n      includeExtensions: includeExtensions\n    },\n    options: fetchOptions,\n    credentials: credentials,\n    headers: headers\n  };\n  return new ApolloLink(function (operation) {\n    var uri = selectURI(operation, fetchUri);\n    var context = operation.getContext();\n    var _context$clientAwaren = context.clientAwareness;\n    _context$clientAwaren = _context$clientAwaren === void 0 ? {} : _context$clientAwaren;\n    var name = _context$clientAwaren.name,\n        version = _context$clientAwaren.version,\n        headers = context.headers;\n    var contextConfig = {\n      http: context.http,\n      options: context.fetchOptions,\n      credentials: context.credentials,\n      headers: (0, _extends2.default)({}, name && {\n        'apollographql-client-name': name\n      }, {}, version && {\n        'apollographql-client-version': version\n      }, {}, headers)\n    };\n\n    var _selectHttpOptionsAnd = selectHttpOptionsAndBody(operation, fallbackHttpConfig, linkConfig, contextConfig),\n        options = _selectHttpOptionsAnd.options,\n        body = _selectHttpOptionsAnd.body;\n\n    var _extractFiles = extractFiles(body),\n        clone = _extractFiles.clone,\n        files = _extractFiles.files;\n\n    var payload = serializeFetchParameter(clone, 'Payload');\n\n    if (files.size) {\n      delete options.headers['content-type'];\n      var form = new FormData();\n      form.append('operations', payload);\n      var map = {};\n      var i = 0;\n      files.forEach(function (paths) {\n        map[++i] = paths;\n      });\n      form.append('map', JSON.stringify(map));\n      i = 0;\n      files.forEach(function (paths, file) {\n        form.append(++i, file, file.name);\n      });\n      options.body = form;\n    } else options.body = payload;\n\n    return new Observable(function (observer) {\n      var _createSignalIfSuppor = createSignalIfSupported(),\n          controller = _createSignalIfSuppor.controller,\n          signal = _createSignalIfSuppor.signal;\n\n      if (controller) options.signal = signal;\n      linkFetch(uri, options).then(function (response) {\n        operation.setContext({\n          response: response\n        });\n        return response;\n      }).then(parseAndCheckHttpResponse(operation)).then(function (result) {\n        observer.next(result);\n        observer.complete();\n      }).catch(function (error) {\n        if (error.name === 'AbortError') return;\n        if (error.result && error.result.errors && error.result.data) observer.next(error.result);\n        observer.error(error);\n      });\n      return function () {\n        if (controller) controller.abort();\n      };\n    });\n  });\n};","map":{"version":3,"sources":["/Users/strnegara/Desktop/ylp/react-strapi-upload/react-app/node_modules/apollo-upload-client/lib/index.js"],"names":["_interopRequireDefault","require","_extends2","_require","ApolloLink","Observable","_require2","selectURI","selectHttpOptionsAndBody","fallbackHttpConfig","serializeFetchParameter","createSignalIfSupported","parseAndCheckHttpResponse","_require3","extractFiles","ReactNativeFile","exports","createUploadLink","_temp","_ref","_ref$uri","uri","fetchUri","_ref$fetch","fetch","linkFetch","fetchOptions","credentials","headers","includeExtensions","linkConfig","http","options","operation","context","getContext","_context$clientAwaren","clientAwareness","name","version","contextConfig","default","_selectHttpOptionsAnd","body","_extractFiles","clone","files","payload","size","form","FormData","append","map","i","forEach","paths","JSON","stringify","file","observer","_createSignalIfSuppor","controller","signal","then","response","setContext","result","next","complete","catch","error","errors","data","abort"],"mappings":"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","sourcesContent":["'use strict'\n\nvar _interopRequireDefault = require('@babel/runtime/helpers/interopRequireDefault')\n\nvar _extends2 = _interopRequireDefault(\n  require('@babel/runtime/helpers/extends')\n)\n\nvar _require = require('apollo-link'),\n  ApolloLink = _require.ApolloLink,\n  Observable = _require.Observable\n\nvar _require2 = require('apollo-link-http-common'),\n  selectURI = _require2.selectURI,\n  selectHttpOptionsAndBody = _require2.selectHttpOptionsAndBody,\n  fallbackHttpConfig = _require2.fallbackHttpConfig,\n  serializeFetchParameter = _require2.serializeFetchParameter,\n  createSignalIfSupported = _require2.createSignalIfSupported,\n  parseAndCheckHttpResponse = _require2.parseAndCheckHttpResponse\n\nvar _require3 = require('extract-files'),\n  extractFiles = _require3.extractFiles,\n  ReactNativeFile = _require3.ReactNativeFile\n\nexports.ReactNativeFile = ReactNativeFile\n\nexports.createUploadLink = function(_temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n    _ref$uri = _ref.uri,\n    fetchUri = _ref$uri === void 0 ? '/graphql' : _ref$uri,\n    _ref$fetch = _ref.fetch,\n    linkFetch = _ref$fetch === void 0 ? fetch : _ref$fetch,\n    fetchOptions = _ref.fetchOptions,\n    credentials = _ref.credentials,\n    headers = _ref.headers,\n    includeExtensions = _ref.includeExtensions\n\n  var linkConfig = {\n    http: {\n      includeExtensions: includeExtensions\n    },\n    options: fetchOptions,\n    credentials: credentials,\n    headers: headers\n  }\n  return new ApolloLink(function(operation) {\n    var uri = selectURI(operation, fetchUri)\n    var context = operation.getContext()\n    var _context$clientAwaren = context.clientAwareness\n    _context$clientAwaren =\n      _context$clientAwaren === void 0 ? {} : _context$clientAwaren\n    var name = _context$clientAwaren.name,\n      version = _context$clientAwaren.version,\n      headers = context.headers\n    var contextConfig = {\n      http: context.http,\n      options: context.fetchOptions,\n      credentials: context.credentials,\n      headers: (0, _extends2.default)(\n        {},\n        name && {\n          'apollographql-client-name': name\n        },\n        {},\n        version && {\n          'apollographql-client-version': version\n        },\n        {},\n        headers\n      )\n    }\n\n    var _selectHttpOptionsAnd = selectHttpOptionsAndBody(\n        operation,\n        fallbackHttpConfig,\n        linkConfig,\n        contextConfig\n      ),\n      options = _selectHttpOptionsAnd.options,\n      body = _selectHttpOptionsAnd.body\n\n    var _extractFiles = extractFiles(body),\n      clone = _extractFiles.clone,\n      files = _extractFiles.files\n\n    var payload = serializeFetchParameter(clone, 'Payload')\n\n    if (files.size) {\n      delete options.headers['content-type']\n      var form = new FormData()\n      form.append('operations', payload)\n      var map = {}\n      var i = 0\n      files.forEach(function(paths) {\n        map[++i] = paths\n      })\n      form.append('map', JSON.stringify(map))\n      i = 0\n      files.forEach(function(paths, file) {\n        form.append(++i, file, file.name)\n      })\n      options.body = form\n    } else options.body = payload\n\n    return new Observable(function(observer) {\n      var _createSignalIfSuppor = createSignalIfSupported(),\n        controller = _createSignalIfSuppor.controller,\n        signal = _createSignalIfSuppor.signal\n\n      if (controller) options.signal = signal\n      linkFetch(uri, options)\n        .then(function(response) {\n          operation.setContext({\n            response: response\n          })\n          return response\n        })\n        .then(parseAndCheckHttpResponse(operation))\n        .then(function(result) {\n          observer.next(result)\n          observer.complete()\n        })\n        .catch(function(error) {\n          if (error.name === 'AbortError') return\n          if (error.result && error.result.errors && error.result.data)\n            observer.next(error.result)\n          observer.error(error)\n        })\n      return function() {\n        if (controller) controller.abort()\n      }\n    })\n  })\n}\n"]},"metadata":{},"sourceType":"script"}