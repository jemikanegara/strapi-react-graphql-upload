{"ast":null,"code":"import ApolloClient__default from 'apollo-client';\nexport * from 'apollo-client';\nimport { ApolloLink, Observable } from 'apollo-link';\nexport * from 'apollo-link';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nexport * from 'apollo-cache-inmemory';\nimport { createUploadLink } from 'apollo-upload-client';\nimport { onError } from 'apollo-link-error';\nexport { default as gql } from 'graphql-tag';\nimport { invariant } from 'ts-invariant';\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n\n/* global Reflect, Promise */\n\nvar extendStatics = function (d, b) {\n  extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  };\n\n  return extendStatics(d, b);\n};\n\nfunction __extends(d, b) {\n  extendStatics(d, b);\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n} // Yes, these are the exact same as the `PresetConfig` interface. We're\n// defining these again so they can be used to verify that valid config\n// options are being used in the `DefaultClient` constructor, for clients\n// that aren't using Typescript. This duplication is unfortunate, and at\n// some point can likely be adjusted so these items are inferred from\n// the `PresetConfig` interface using a Typescript transform at compilation\n// time. Unfortunately, TS transforms with rollup don't appear to be quite\n// working properly, so this will have to be re-visited at some point.\n// For now, when updating the properties of the `PresetConfig` interface,\n// please also update this constant.\n\n\nvar PRESET_CONFIG_KEYS = ['request', 'uri', 'credentials', 'headers', 'fetch', 'fetchOptions', 'clientState', 'onError', 'cacheRedirects', 'cache', 'name', 'version', 'resolvers', 'typeDefs', 'fragmentMatcher'];\n\nvar DefaultClient =\n/** @class */\nfunction (_super) {\n  __extends(DefaultClient, _super);\n\n  function DefaultClient(config) {\n    if (config === void 0) {\n      config = {};\n    }\n\n    var _this = this;\n\n    if (config) {\n      var diff = Object.keys(config).filter(function (key) {\n        return PRESET_CONFIG_KEYS.indexOf(key) === -1;\n      });\n\n      if (diff.length > 0) {\n        invariant.warn('ApolloBoost was initialized with unsupported options: ' + (\"\" + diff.join(' ')));\n      }\n    }\n\n    var request = config.request,\n        uri = config.uri,\n        credentials = config.credentials,\n        headers = config.headers,\n        fetch = config.fetch,\n        fetchOptions = config.fetchOptions,\n        clientState = config.clientState,\n        cacheRedirects = config.cacheRedirects,\n        errorCallback = config.onError,\n        name = config.name,\n        version = config.version,\n        resolvers = config.resolvers,\n        typeDefs = config.typeDefs,\n        fragmentMatcher = config.fragmentMatcher;\n    var cache = config.cache;\n    invariant(!cache || !cacheRedirects, 'Incompatible cache configuration. When not providing `cache`, ' + 'configure the provided instance with `cacheRedirects` instead.');\n\n    if (!cache) {\n      cache = cacheRedirects ? new InMemoryCache({\n        cacheRedirects: cacheRedirects\n      }) : new InMemoryCache();\n    }\n\n    var errorLink = errorCallback ? onError(errorCallback) : onError(function (_a) {\n      var graphQLErrors = _a.graphQLErrors,\n          networkError = _a.networkError;\n\n      if (graphQLErrors) {\n        graphQLErrors.forEach(function (_a) {\n          var message = _a.message,\n              locations = _a.locations,\n              path = _a.path; // tslint:disable-next-line\n\n          return invariant.warn(\"[GraphQL error]: Message: \" + message + \", Location: \" + (locations + \", Path: \" + path));\n        });\n      }\n\n      if (networkError) {\n        // tslint:disable-next-line\n        invariant.warn(\"[Network error]: \" + networkError);\n      }\n    });\n    var requestHandler = request ? new ApolloLink(function (operation, forward) {\n      return new Observable(function (observer) {\n        var handle;\n        Promise.resolve(operation).then(function (oper) {\n          return request(oper);\n        }).then(function () {\n          handle = forward(operation).subscribe({\n            next: observer.next.bind(observer),\n            error: observer.error.bind(observer),\n            complete: observer.complete.bind(observer)\n          });\n        }).catch(observer.error.bind(observer));\n        return function () {\n          if (handle) {\n            handle.unsubscribe();\n          }\n        };\n      });\n    }) : false;\n    var uploadLink = createUploadLink({\n      uri: uri || '/graphql',\n      fetch: fetch,\n      fetchOptions: fetchOptions || {},\n      credentials: credentials || 'same-origin',\n      headers: headers || {}\n    });\n    var link = ApolloLink.from([errorLink, requestHandler, uploadLink].filter(function (x) {\n      return !!x;\n    }));\n    var activeResolvers = resolvers;\n    var activeTypeDefs = typeDefs;\n    var activeFragmentMatcher = fragmentMatcher;\n\n    if (clientState) {\n      if (clientState.defaults) {\n        cache.writeData({\n          data: clientState.defaults\n        });\n      }\n\n      activeResolvers = clientState.resolvers;\n      activeTypeDefs = clientState.typeDefs;\n      activeFragmentMatcher = clientState.fragmentMatcher;\n    } // super hacky, we will fix the types eventually\n\n\n    _this = _super.call(this, {\n      cache: cache,\n      link: link,\n      name: name,\n      version: version,\n      resolvers: activeResolvers,\n      typeDefs: activeTypeDefs,\n      fragmentMatcher: activeFragmentMatcher\n    }) || this;\n    return _this;\n  }\n\n  return DefaultClient;\n}(ApolloClient__default);\n\nexport default DefaultClient;","map":{"version":3,"sources":["/Users/strnegara/Desktop/ylp/react-strapi-upload/react-app/node_modules/apollo-boost-upload/dist/index.esm.js"],"names":["ApolloClient__default","ApolloLink","Observable","InMemoryCache","createUploadLink","onError","default","gql","invariant","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","constructor","prototype","create","PRESET_CONFIG_KEYS","DefaultClient","_super","config","_this","diff","keys","filter","key","indexOf","length","warn","join","request","uri","credentials","headers","fetch","fetchOptions","clientState","cacheRedirects","errorCallback","name","version","resolvers","typeDefs","fragmentMatcher","cache","errorLink","_a","graphQLErrors","networkError","forEach","message","locations","path","requestHandler","operation","forward","observer","handle","Promise","resolve","then","oper","subscribe","next","bind","error","complete","catch","unsubscribe","uploadLink","link","from","x","activeResolvers","activeTypeDefs","activeFragmentMatcher","defaults","writeData","data","call"],"mappings":"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","sourcesContent":["import ApolloClient__default from 'apollo-client';\nexport * from 'apollo-client';\nimport { ApolloLink, Observable } from 'apollo-link';\nexport * from 'apollo-link';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nexport * from 'apollo-cache-inmemory';\nimport { createUploadLink } from 'apollo-upload-client';\nimport { onError } from 'apollo-link-error';\nexport { default as gql } from 'graphql-tag';\nimport { invariant } from 'ts-invariant';\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nfunction __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\n\n// Yes, these are the exact same as the `PresetConfig` interface. We're\r\n// defining these again so they can be used to verify that valid config\r\n// options are being used in the `DefaultClient` constructor, for clients\r\n// that aren't using Typescript. This duplication is unfortunate, and at\r\n// some point can likely be adjusted so these items are inferred from\r\n// the `PresetConfig` interface using a Typescript transform at compilation\r\n// time. Unfortunately, TS transforms with rollup don't appear to be quite\r\n// working properly, so this will have to be re-visited at some point.\r\n// For now, when updating the properties of the `PresetConfig` interface,\r\n// please also update this constant.\r\nvar PRESET_CONFIG_KEYS = [\r\n    'request',\r\n    'uri',\r\n    'credentials',\r\n    'headers',\r\n    'fetch',\r\n    'fetchOptions',\r\n    'clientState',\r\n    'onError',\r\n    'cacheRedirects',\r\n    'cache',\r\n    'name',\r\n    'version',\r\n    'resolvers',\r\n    'typeDefs',\r\n    'fragmentMatcher',\r\n];\r\nvar DefaultClient = /** @class */ (function (_super) {\r\n    __extends(DefaultClient, _super);\r\n    function DefaultClient(config) {\r\n        if (config === void 0) { config = {}; }\r\n        var _this = this;\r\n        if (config) {\r\n            var diff = Object.keys(config).filter(function (key) { return PRESET_CONFIG_KEYS.indexOf(key) === -1; });\r\n            if (diff.length > 0) {\r\n                invariant.warn('ApolloBoost was initialized with unsupported options: ' + (\"\" + diff.join(' ')));\r\n            }\r\n        }\r\n        var request = config.request, uri = config.uri, credentials = config.credentials, headers = config.headers, fetch = config.fetch, fetchOptions = config.fetchOptions, clientState = config.clientState, cacheRedirects = config.cacheRedirects, errorCallback = config.onError, name = config.name, version = config.version, resolvers = config.resolvers, typeDefs = config.typeDefs, fragmentMatcher = config.fragmentMatcher;\r\n        var cache = config.cache;\r\n        invariant(!cache || !cacheRedirects, 'Incompatible cache configuration. When not providing `cache`, ' +\r\n            'configure the provided instance with `cacheRedirects` instead.');\r\n        if (!cache) {\r\n            cache = cacheRedirects ? new InMemoryCache({ cacheRedirects: cacheRedirects }) : new InMemoryCache();\r\n        }\r\n        var errorLink = errorCallback\r\n            ? onError(errorCallback)\r\n            : onError(function (_a) {\r\n                var graphQLErrors = _a.graphQLErrors, networkError = _a.networkError;\r\n                if (graphQLErrors) {\r\n                    graphQLErrors.forEach(function (_a) {\r\n                        var message = _a.message, locations = _a.locations, path = _a.path;\r\n                        // tslint:disable-next-line\r\n                        return invariant.warn(\"[GraphQL error]: Message: \" + message + \", Location: \" + (locations + \", Path: \" + path));\r\n                    });\r\n                }\r\n                if (networkError) {\r\n                    // tslint:disable-next-line\r\n                    invariant.warn(\"[Network error]: \" + networkError);\r\n                }\r\n            });\r\n        var requestHandler = request\r\n            ? new ApolloLink(function (operation, forward) {\r\n                return new Observable(function (observer) {\r\n                    var handle;\r\n                    Promise.resolve(operation)\r\n                        .then(function (oper) { return request(oper); })\r\n                        .then(function () {\r\n                        handle = forward(operation).subscribe({\r\n                            next: observer.next.bind(observer),\r\n                            error: observer.error.bind(observer),\r\n                            complete: observer.complete.bind(observer),\r\n                        });\r\n                    })\r\n                        .catch(observer.error.bind(observer));\r\n                    return function () {\r\n                        if (handle) {\r\n                            handle.unsubscribe();\r\n                        }\r\n                    };\r\n                });\r\n            })\r\n            : false;\r\n        var uploadLink = createUploadLink({\r\n            uri: uri || '/graphql',\r\n            fetch: fetch,\r\n            fetchOptions: fetchOptions || {},\r\n            credentials: credentials || 'same-origin',\r\n            headers: headers || {},\r\n        });\r\n        var link = ApolloLink.from([errorLink, requestHandler, uploadLink].filter(function (x) { return !!x; }));\r\n        var activeResolvers = resolvers;\r\n        var activeTypeDefs = typeDefs;\r\n        var activeFragmentMatcher = fragmentMatcher;\r\n        if (clientState) {\r\n            if (clientState.defaults) {\r\n                cache.writeData({\r\n                    data: clientState.defaults,\r\n                });\r\n            }\r\n            activeResolvers = clientState.resolvers;\r\n            activeTypeDefs = clientState.typeDefs;\r\n            activeFragmentMatcher = clientState.fragmentMatcher;\r\n        }\r\n        // super hacky, we will fix the types eventually\r\n        _this = _super.call(this, {\r\n            cache: cache,\r\n            link: link,\r\n            name: name,\r\n            version: version,\r\n            resolvers: activeResolvers,\r\n            typeDefs: activeTypeDefs,\r\n            fragmentMatcher: activeFragmentMatcher,\r\n        }) || this;\r\n        return _this;\r\n    }\r\n    return DefaultClient;\r\n}(ApolloClient__default));\n\nexport default DefaultClient;\n"]},"metadata":{},"sourceType":"module"}